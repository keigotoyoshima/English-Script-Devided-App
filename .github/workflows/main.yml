name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    env:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_DB: github_actions
      POSTGRES_PORT: 5431
      DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
      
    services:
      postgres:
        image: postgres:14.2
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
        - 5432:5431
        # needed because the postgres container does not provide a healthcheck
        options: 
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      working-directory: ./english_script_devided_app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip list

    - name: Run migrations
      working-directory: ./english_script_devided_app
      env:
          SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DEBUG: 1
          ALLOWED_HOSTS: localhost
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Run Tests
      working-directory: ./english_script_devided_app
      env:
          SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DEBUG: 1
          ALLOWED_HOSTS: localhost
      run: |  
        python manage.py test api -v 2

    - uses: actions/checkout@v3
    - name: Build the images and start the containers

      working-directory: ./english_script_devided_app
      run: |
        export GITHUB_WORKFLOW=False
        docker-compose -f docker-compose.yml up -d
    - name: Stop containers
      if: always()
      run: docker-compose -f docker-compose.yml down


        

    # - name: deploy
    #   env:
    #      EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
    #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     git config --local user.email "keigo.work199987s@gmail.com"
    #     git config --local user.name "keigotoyoshima"
    #     git remote set-url origin https://github-actions:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
    #     git config pull.rebase false
    #     git pull
    #     git checkout bundle
    #     git pull origin main
    #     git push origin bundle


