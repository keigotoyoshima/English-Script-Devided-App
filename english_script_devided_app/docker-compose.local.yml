version: '3'
services: 
  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    container_name: frontend
    command: yarn run dev
    volumes:
      -  ./frontend:/usr/src/app/frontend

  # frontendで作られるstaticだけ共有
  backend:
    build: .
    container_name: backend
    command: sh -c 'python manage.py migrate && python manage.py runserver 0.0.0.0:8000'
    ports:
      - 8000:8000
    volumes:
      - .:/usr/src/app
    depends_on:
      - db

  db:
    image: postgres:14.2
    container_name: db
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    ports:
      - 5432:5432
    volumes:
      - ./postgres_data:/var/lib/postgresql/data  

  # web:
  #   image: nginx:1.21-alpine
  #   container_name: web
  #   ports:  
  #     - 80:80
  #   volumes:
  #     - ./nginx.local.conf:/etc/nginx/conf.d/default.conf
  #     - ./gunicorn:/run/gunicorn
  #     - ./staticfiles:/usr/src/app/staticfiles
  #   depends_on:
  #     - app

# docker-composeをlocalと本番で分ける理由

# サーバーについて
# 本番では，nginxを動かし，localでは静的ファイルの自動反映をしながら開発したいので，開発用サーバー（runserver)を使用する．

# ssl証明について
# 本番では，ssl化のためにec2内にあるSSL証明書をマウントする必要がある．

# webpackについて
# localでは，docker-compse upの時にyarnをdevelopモードで実行して，本番ではCICDの時にyarnをproductionモードで実行するように分ける必要がある．

