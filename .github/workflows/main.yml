name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    env:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_DB: github_actions
      DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
      
    services:
      postgres:
        image: postgres:14.2
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
        ports:
        - 5433:5432
        # needed because the postgres container does not provide a healthcheck
        options: 
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      working-directory: ./english_script_devided_app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip list

    - name: Run migrations
      working-directory: ./english_script_devided_app
      env:
          SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DEBUG: 1
          ALLOWED_HOSTS: localhost
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Run Tests
      working-directory: ./english_script_devided_app
      env:
          SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          DEBUG: 1
          ALLOWED_HOSTS: localhost
      run: |  
        python manage.py test api -v 2

        

    - name: Deploy to stage
      env:
        EC2_STG_PRIVATE_KEY: ${{ secrets.EC2_STG_PRIVATE_KEY }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_STG_HOST: ${{ secrets.EC2_STG_HOST }}
        #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "$EC2_STG_PRIVATE_KEY" > secret_key
        ls -al
        chmod 400 secret_key
        ssh -oStrictHostKeyChecking=no ${EC2_USER}@${EC2_STG_HOST} -i secret_key  "cd English-Script-Devided-App/english_script_devided_app \
        && git pull \
        && cd frontend \
        && yarn run dev \
        && cd - \
        && python manage.py collectstatic"



      



